<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnAmThanh.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>